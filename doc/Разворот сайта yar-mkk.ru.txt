Заметки по настройке VPS для сайта yar-mkk.ru.
Здесь описан процесс разворота сайта с нуля. При частичном обновлении многие шаги не нужны (некоторые могут измениться)

I. ОБЩАЯ НАСТРОЙКА СЕРВЕРА:
	1. Заходим на сервак по SSH под root с тем паролем, который указан в админской панели VPS провайдера
	2. Сначала обновимся на всякий случай:
		sudo apt update
		sudo apt upgrade
	3. Настройка локали:
		sudo locale-gen ru_RU.UTF-8
		sudo locale-gen en_US.UTF-8
		sudo dpkg-reconfigure locales
	4. Нужно первым делом правильно настроить доступ на сервер. Создадим нового sudoer пользователя под которым будем ходить:
		sudo adduser yar_mkk
		sudo adduser yar_mkk sudo
		Перезайдем под этим пользователем... (ВАЖНО!)
	5. Полезные программы поставим:
		sudo apt install htop
		sudo apt install nano
		sudo apt install mc
		sudo apt install curl
	6. Открываем через nano (или через другой редактор)
		sudo nano /etc/ssh/sshd_config
		
		Пропишем на данном этапе параметры:
		Port 9001
		PermitRootLogin no
		
		Перезапустим сервер SSH
		sudo systemctl restart sshd
	7. Хостинг ставят нам софт, который мы не просили, например, Apache, который мы не пользуем.
		Чтобы было меньше уязвимостей в безопасности, снесем его:
		sudo apt purge apache2
		
	8. Создаём файлы ключей (команда запускается из под того пользователя, для которого настраивается вход)
		ssh-keygen -t rsa -b 4096
		Нужно задать пароль для закрытого ключа для пущей безопасности (и запомнить)

		Забираем себе закрытый ключ (и открытый ключ тоже):
			cat ~/.ssh/id_rsa
			cat ~/.ssh/id_rsa.pub
		Сохраняем их себе для доступа (названия файлов лучше не менять)
		
		Удаляем закрытый ключ с сервера, т.к. он не нужен там
		rm ~/.ssh/id_rsa

	9. Необходимо перекинуть ключ в специалный файл
		cd ~/.ssh
		touch authorized_keys
		
		Зададим владельца на файл:
		chown yar_mkk:yar_mkk authorized_keys
		
		Собственно скопируем данные:
		cat id_rsa.pub >> authorized_keys

		Установка прав на файл и папку:
		chmod 0700 ~/.ssh/
		chmod 0600 ~/.ssh/authorized_keys
		
		Проверим, что текст скопировался:
		cat /home/yar_mkk/.ssh/authorized_keys

		Удаляем открытый ключ из начального расположения:
		rm /home/yar_mkk/.ssh/id_rsa.pub

	10. Настраиваем заход через ключ:
		sudo nano /etc/ssh/sshd_config

		Нужно задать значение параметров:
			# разрешаем авторизацию при помощи ключей
			PubkeyAuthentication yes
			
			# Путь, где будут находиться ключи, с которыми можно соединяться для каждого пользователя свой файл в его директории.
			AuthorizedKeysFile %h/.ssh/authorized_keys
			
			Тут стоит проверить другие параметры безопасности...
			
			# Время ожидания авторизации
				LoginGraceTime 30
			Таймаут при отсутствии активности соединения.

			Автоматическое отключение соединения после определенного времени, в течение которого зафиксировано бездействие в консоли.

			ClientAliveCountMax – Параметр указывает на полное количество сообщений, отсылаемых ssh-сервером для распознавания активности ssh-клиента. По умолчанию это 3.
			ClientAliveInterval – Параметр указывает на время ожидания в секундах. По истечению ssh-сервер отошлет сообщение-запрос клиенту. По умолчанию значение этого параметра – 0. Сервер не отсылает сообщение для проверки.

			Отключение ssh-клиента автоматически после 5 минут (300 секунд):
				ClientAliveInterval 300
				ClientAliveCountMax 0
			
			У нас нет графического интерфейса на сервере, т.е. можно отключить
				X11Forwarding no
			
	11. Применяем настройки демона SSH:
		sudo systemctl restart sshd

	12. Пробуем зайти по ключу со своей локальной машины:
		ssh yar_mkk@new.yar-mkk.ru -p 9001 -i "<путь к файлу закрытого ключа>"
		
		Замечание: у ключа на локальной машине тоже нужно "сузить" разрешения (иначе будет ругаться)
			chmod 700 <Путь к папке ключа>/id_rsa
			chmod 700 <Путь к папке ключа>/id_rsa.pub

	13. Если вход успешно удался, то далее отключаем вход по паролю:
		sudo nano /etc/ssh/sshd_config
		
		Задаём параметр:
			PasswordAuthentication no
		
		Думаю можно задать ещё:
			UsePAM no

		Снова перезапускаем для применения:
			sudo systemctl restart sshd

	14. Проверить еще раз, что можно зайти через файл закрытого ключа, но нельзя зайти по паролю (!!!)

УСТАНОВКА НЕОБХОДИМОГО ПРОГРАМНОГО ОБЕСПЕЧЕНИЯ ДЛЯ САЙТА МКК

	1. Нужно установить postgresql-9.6. Обычно в официальном репозитории какая-то "левая" версия.
		Поэтому нужно сказать откуда брать:
		Зайти в файл:
			sudo nano /etc/apt/sources.list.d/pgdg.list
		Добавить строку в конец (это для Ubuntu 16.04):
			deb http://apt.postgresql.org/pub/repos/apt/ xenial-pgdg main
			
		Что-то про обновление подписи (тоже надо):
			wget --quiet -O - https://www.postgresql.org/media/keys/ACCC4CF8.asc | sudo apt-key add -
			sudo apt update
		
		Ставим постгрес:
			sudo apt install postgresql-9.6

		Наверно, нужно поставить еще клиент и C либу для работы с постгресом...
		
	2. Настройка постгрес:
		cd /etc/postgresql/9.6/main
		
		Открываем файл:
			sudo nano postgresql.conf
		
		Редактируем (чтобы слушать лишь с локального порта):
			listen_addresses = 'localhost'


		Открываем файл:
			sudo nano pg_hba.conf
		Оставляем так:
			# Database administrative login by Unix domain socket
			local   all             postgres                                trust

			# TYPE  DATABASE        USER            ADDRESS                 METHOD

			# "local" is for Unix domain socket connections only
			local   all             all                                     md5
			# IPv4 local connections:
			host    all             all             127.0.0.1/32            md5
		Остальное комментируем или удаляем (IP6 пока не надо)
		
		Перезапускаем базу как-либо:
			sudo killall -S HUP postgres


		Заходим и ставим пароль пользователю postgres, например:
			psql -U postgres
			
		SQL-команда:
			ALTER USER postgres WITH password <password>;
		
		Открываем файл:
			sudo nano pg_hba.conf
		Заменяем на:
			# Database administrative login by Unix domain socket
			local   all             postgres                                md5

		Снова перезапускаем базу как-либо:
			sudo killall -S HUP postgres
		Теперь весь вход по паролю...


	2. Постановка front-сервера nginx
		sudo apt install nginx
		
		Переходим в конфиги nginx:
			cd /etc/nginx
		
		Сделаем резервную копию конфига:
			sudo nginx.conf nginx.conf.orig
			
		Добавление нового сайта в список доступных:
			cd /etc/nginx/sites-available
			sudo cp default new.yar-mkk.ru
			
		Поредактируем конфиг:
			sudo nano new.yar-mkk.ru
		Должно быть там следующее:
			server {
				listen       80;
				root /home/yar_mkk/sites/mkk/pub/;
				
				server_name new.yar-mkk.ru www.new.yar-mkk.ru;
				
				location /pub/ {
						root   /home/yar_mkk/sites/mkk/;
						index  index.html index.htm;
				}

				location /robots.txt {
					root   /home/yar_mkk/sites/mkk/pub/;
				}

				location /jsonrpc/ {
					proxy_pass   http://127.0.0.1:8083;
					proxy_redirect off;
				}

				location /dyn/ {
					proxy_pass   http://127.0.0.1:8082;
					proxy_redirect off;
				}

				location / {
					proxy_pass http://127.0.0.1:8082/dyn/index;
					proxy_redirect off;
				}
			}
			
		Докидываем ссылку в sites-enabled:
			cd /etc/nginx/sites-enabled
			sudo ln -s /etc/nginx/new.yar-mkk.ru
			
		Сайт по-умолчанию нам не нужен, наверно:
			sudo rm /etc/nginx/sites-enabled/default
		
		Перезапускаем nginx:
			sudo systemctl restart nginx
			
		Ещё по идее нужно сгенерить сертифкат сайта и настроиться на его использование...

	3. Установка node для сборки сайта
		Скачиваем видимо какой-то подготовительный скрипт, чтобы поставить актуальную версию
			curl -sL https://deb.nodesource.com/setup_8.x | sudo -E bash -
			sudo apt install -y nodejs
		
		Можно проверить, что встала 8ая версия (npm тоже должен быть):
			nodejs -v
			npm -v
		
	4. Поставим grunt
		Обновим npm список пакетов:
			sudo npm update
		
		Поставим утилиту командной строки grunt-cli глобально:
			sudo npm install grunt-cli -g

	5. Нам нужны еще замечательные средства работы с репозиториями:
		sudo apt install mercurial
		sudo apt install git
		
РАЗВОРОТ ФАЙЛОВ САЙТА:
	1. Создадим папочку для исходников:
		mkdir ~/sources
		cd ~/sources
	
	2. Вытягиваем 4 репозитория:
		
		На гитхабе (репозитории типа git):
		Репозиторий библиотеки интерфейсных компонентов (fir):
			git clone https://github.com/uranuz/ivy.git
		Репозиторий шаблонизатора (ivy):
			git clone https://github.com/uranuz/fir.git
		
		На битбакете (репозитории типа hg):
		Репозиторий серверной библиотеки (webtank):
			hg clone https://bitbucket.org/uranuz/webtank
		Репозиторий сайта МКК (у него нужен логин/ пароль для доступа)
			hg clone https://bitbucket.org/uranuz/yar_mkk
		
		Отмечу, что у нас есть ветки для разных версий
		и нужно переключиться на нужную ветку командами, перейдя перед этим в папку репозитория
			git checkout <имя ветки>
			hg checkout <имя ветки>

		Все локальные репозитории нужно обновить до нужной версии!!!

	3. Разворот ресурсов сайта в каталог ~/sites/mkk/
	
		Переходим в fir:
			cd ~/sources/fir

		Нужно установить JavaScript-зависимости через npm:
			npm install
		Если установка прошла успешно, то запускаем разворот (он идёт по-умолчанию в ~/sites/mkk/):
			grunt


		Идём репозиторий сайта:
			cd ~/sources/yar_mkk
		Ставим JavaScript-зависимости через npm:
			npm install
		Здесь есть два варианта разворота: для отладки и для релиза.
		Для отладки запускаем:
			grunt
		Для релиза:
			grunt dist
		
		Идём в ~/sites/mkk им проверяем, что есть папки pub и res
			ls ~/sites/mkk


СБОРКА И НАСТРОЙКА ЗАПУСКА СЕРВИСОВ САЙТА МКК:
	1. Скачиваем компилятор D:
		Создадим папочку для пакетов и зайдем в неё
			mkdir ~/packages
			cd ~/packages
		
		Скачаем компилятор актуальной версии с dlang.org, например.
			wget http://downloads.dlang.org/releases/2.x/2.077.1/dmd_2.077.1-0_amd64.deb
			
		Установим компилятор:
			sudo dpkg -i dmd_2.077.1-0_amd64.deb
			
		Поставим зависимости пакета (если нет):
			sudo apt -f install
	
	2. Сборка сервисов
		Зайдем в скачаный репозиторий сайта МКК:
			cd ~/sources/yar_mkk
		
		Для сборки утилите dub нужно указать откуда брать наши пакеты:
			dub add-local ~/sources/ivy
			dub add-local ~/sources/webtank
			
		Нужно установить ряд системных библиотек:
			Криптография:
				sudo apt install libssl-dev
			Работа с БД:
				sudo apt install libpq-dev
		
		Сборка основного сервиса:
			dub build :main_service
		
		Сборка сервиса отображения:
			dub build :view_service
		
			
		
		
		