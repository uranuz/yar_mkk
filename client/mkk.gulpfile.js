'use strict';

var
	devMode = process.env.NODE_ENV !== 'production',
	path = require('path'),
	gulp = require('gulp'),
	webpack = require('webpack'),
	nodeExternals = require('webpack-node-externals'),
	gutil = require("gulp-util"),
	MiniCssExtractPlugin = require('mini-css-extract-plugin'),
	vfs = require('vinyl-fs'),
	shell = require('gulp-shell'),
	yargs = require('yargs'),
	argv = yargs.argv,
	expandTilde = require('expand-tilde'),
	gulpClean = require('gulp-clean'),
	gulpHelpers = require('./gulp_helpers'),
	sites = gulpHelpers.resolveConfig();


var bootstrapSass = path.resolve(__dirname, 'node_modules/bootstrap/scss');


function buildEntries(config, entryMap, callback) {
	var
		libraryTarget = 'window',
		manifestsPath = path.join(config.outPub, `manifest/`);
	
	// run webpack
	webpack({
		context: __dirname,
		mode: (devMode? 'development': 'production'),
		entry: entryMap,
		resolve: {
			modules: [
				__dirname
			],
			extensions: ['.js', '.scss'],
			symlinks: false
		},
		module: {
			rules: [
				{
					test: /\.s[ac]ss$/,
					use: [
						MiniCssExtractPlugin.loader,
						// Translates CSS into CommonJS
						{
							loader: 'css-loader',
							options: {
								sourceMap: true
							}
						},
						// Compiles Sass to CSS
						{
							loader: 'sass-loader',
							options: {
								implementation: require('node-sass'),
								sourceMap: true,
								sassOptions: {
									indentWidth: 4,
									includePaths: [bootstrapSass, __dirname],
								}
							}
						}
					]
				},
				{
					test: /\.(png|jpe?g|gif|svg)$/,
					use: [
						{
							loader: 'file-loader',
							options: {
								name: '[path][name].[ext]',
								publicPath: config.publicPath
							}
						}
					]
				}
			]
		},
		plugins: [
			new webpack.DllReferencePlugin({
				manifest: require(path.join(manifestsPath, 'ivy.manifest.json')),
				sourceType: libraryTarget
			}),
			new webpack.DllReferencePlugin({
				manifest: require(path.join(manifestsPath, 'fir.manifest.json')),
				sourceType: libraryTarget
			}),
			new webpack.DllPlugin({
				name: '[name]',
				path: path.join(manifestsPath, '[name].manifest.json')
			}),
			new MiniCssExtractPlugin({
				// Options similar to the same options in webpackOptions.output
				// both options are optional
				filename: '[name].css',
				chunkFilename: '[id].css',
			})
		],
		devtool: 'cheap-source-map',
		output: {
			path: config.outPub,
			publicPath: config.publicPath,
			filename: '[name].js',
			libraryTarget: libraryTarget,
			library: '[name]'
		}
	}, callback);
}

function buildSite(config, callback) {
	var entryMap = {};

	config.entry.forEach(function(it) {
		entryMap[it] = [it];
	});
	buildEntries(config, entryMap, function(err, stats) {
		if(err) {
			throw new gutil.PluginError("webpack", err);
		}
		gutil.log("[webpack]", stats.toString({
			// output options
		}));
		callback(); // сообщаем gulp'у, что точки входа собраны
	});
}

gulp.task("mkk-webpack", function(callback) {
	buildSite(sites.mkk, callback);
});

gulp.task("mkk-symlink-templates", function() {
	return gulp.src(['mkk/**/*.ivy'], {base: './'})
		.pipe(vfs.symlink(sites.mkk.outTemplates));
});

gulp.task("mkk-symlink-js", function() {
	return gulp.src(['mkk/**/*.js'], {
			base: './'
		})
		.pipe(gulp.symlink(sites.mkk.outPub, {
			owerwrite: false // Don't overwrite files generated by webpack
		}));
});

gulp.task("mkk-symlink-files", function() {
	return gulp.src([
			'flot',
			'reports',
			'stati_dokument',
			'ext',
			'robots.txt',
			'mkk/run_globals.js',
			'mkk/run_app.js'
		], {base: './'})
		.pipe(vfs.symlink(sites.mkk.outPub));
});

gulp.task("mkk-symlink-bootstrap", function() {
	return gulp.src([
			'node_modules/bootstrap/dist/**/*.js'
		], {base: 'node_modules/'})
		.pipe(vfs.symlink(sites.mkk.outPub));
});

gulp.task("mkk-ivy", shell.task(
	'gulp --outPub=' + sites.mkk.outPub + ' --gulpfile="' + path.resolve('./ivy.gulpfile.js') + '"',
	{
		cwd: path.resolve('./') // Set current working dir
	}
));

gulp.task("mkk-fir", shell.task(
	'gulp --gulpfile="' + path.resolve('./fir.gulpfile.js') + '" --outPub="' + sites.mkk.outPub + '" --outTemplates="' + sites.mkk.outTemplates + '"' ,
	{
		cwd: path.resolve('./') // Set current working dir
	}
));

gulp.task("mkk-clean", function() {
	return gulp.src([sites.mkk.outPub, sites.mkk.outTemplates], {
		read: false,
		allowEmpty: true
	}).pipe(gulpClean({force: true}));
});

// Create bundles then add nonexisting files as symlinks...
gulp.task("mkk-js", gulp.series(["mkk-webpack", "mkk-symlink-js"]))

gulp.task("mkk", gulp.series([
	"mkk-clean",
	"mkk-ivy",
	"mkk-fir",
	"mkk-webpack",
	"mkk-symlink-templates",
	"mkk-symlink-files",
	"mkk-symlink-bootstrap"
]));

/*** FILMS tasks */
gulp.task("films-webpack", function(callback) {
	buildSite(sites.films, callback);
});

gulp.task("films", gulp.series(["films-webpack"]));


gulp.task("default", gulp.series(['mkk']));

