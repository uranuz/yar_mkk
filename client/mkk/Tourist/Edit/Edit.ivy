expr {=
from fir.controls.utils import cls, enumFormatWithNull, firScopeOptsEnc, hasRight;
from fir.controls.PlainDatePicker import PlainDatePicker;
from fir.controls.PlainListBox import PlainListBox;
from mkk.Tourist.PlainList import TouristPlainList;
from mkk.Helpers.DeleteConfirm import DeleteConfirm;

def LabeledInput {=
	def.kv caption field appendix: null forceNoCheck: null;
	def.body noscope {*
	<div class="form-group row align-items-center">
		<label class="col-md-3 col-form-label" for="{{field ~ 'Field'}}">{{caption}}</label>
		<div class="col-md-6">
			<input type="text"
				name="{{field}}"
				class="{=cls field} form-control"
				value="{=at tourist field}"
				id="{{field ~ 'Field'}}"
				{=if not{=hasRight subobj: field kind: 'edit'} and checkRights and not forceNoCheck 'disabled'}/>
		</div>
		<div class="col-auto px-1">{{appendix}}</div>
	</div>
	*};
};

def ShowCheckBox {=
	def.kv caption: 'Показать всем' field;
	def.body noscope{*
		<div class="form-check">
			<input type="checkbox"
				name="{{field}}"
				class="{=cls field} form-check-input"
				id="{{field ~ 'Field'}}"
				{=if {=at tourist field} 'checked'}
				{=if not{=hasRight subobj: field kind: 'edit'} and checkRights 'disabled'}/>
			<label class="form-check-label" for="{{field ~ 'Field'}}">{{caption}}</label>
			<input type="hidden" name="{{field}}" value=""/>
		</div>
	*};
};

def ListBoxRow {=
	def.kv caption field;
	def.body noscope {*
		{=var
			enum: {=at tourist field}
		}
		<div class="form-group row">
			<label class="col-md-3 col-form-label">{{caption}}</label>
			<div class="col-md-6">
				{=PlainListBox
					instanceName: field ~ 'Field'
					formField: field
					keyField: 'value'
					displayField: 'name'
					items: {=enumFormatWithNull enum.format 'не задано'}
					selectedKey: enum.value
					disabled: not{=hasRight subobj: field kind: 'edit'} and checkRights
				}
			</div>
		</div>
	*}
};

def TouristEdit {=
	def.kv
		moduleName: 'mkk/Tourist/Edit/Edit'
		instanceName: 'touristEdit'
		cssBaseClass: 'mkk-TouristEdit'
		accessObject: 'tourist.item'
		tourist: null
		isEditDialog: true;
	def.body {*
		{=if isEditDialog {=
			if not userIdentity.isAuthenticated {=
				return {*
					<h4>
						Для редактирования данных туриста требуется
						<a href="/dyn/auth" title="Аутентификация">выполнить вход</a>
						на сайт
					</h4>
				*}
			} elif not {=hasRight kind: 'edit'} {=
				return {*
					<h4>У вас недостаточно прав для редактирования данных туриста</h4>
				*}
			}
		} }
		{=var checkRights: isEditDialog or (not{=empty tourist} and not{=empty tourist.num})}
	<div class="{=cls 'block'}" data-fir-module="{{moduleName}}">
		<input type="hidden" data-fir-opts="{=firScopeOptsEnc fields: ['isEditDialog', 'checkRights'] }"/>
		<div class="{=cls 'topButtons'}">
			{=if isEditDialog {*
			{=if {=hasRight kind: 'edit'} {*
			<a href="{{vpaths.siteDynamic}}tourist/history?num={{tourist.num}}"
				class="btn btn-sm btn-secondary"
				>История</a>
			*}}
			<a href="{{vpaths.siteDynamic}}tourist/experience?num={{tourist.num}}"
				class="btn btn-sm btn-secondary"
				>Просмотр</a>
			*} }
		</div>
		{=if isEditDialog
			{*<form
			class="{=cls 'touristForm'} form"
			method="POST"
			action="{{vpaths.siteDynamic}}tourist/edit/results">*}
		}
			{=if isEditDialog {*<h2>Редактирование данных туриста</h2>*} }
			<input type="hidden" name="num" value="{{tourist.num}}"/>
			{%
				LabeledInput caption: 'Фамилия' field: 'familyName';
				LabeledInput caption: 'Имя' field: 'givenName';
				LabeledInput caption: 'Отчество' field: 'patronymic';
			}
			<div class="form-group row">
				<label class="col-md-3 col-form-label">Дата рождения</label>
				<div class="col-md-8">
					{=PlainDatePicker
						instanceName: 'birthDateField'
						dayFormField: 'birthDay'
						monthFormField: 'birthMonth'
						yearFormField: 'birthYear'
						day: tourist.birthDay
						month: tourist.birthMonth
						year: tourist.birthYear
						disabled: not{=hasRight subobj: 'birthDate' kind: 'edit'} and checkRights
					}
				</div>
			</div>
			{=if isEditDialog {=LabeledInput caption: 'Адрес проживания' field: 'address'} }
			{=if isEditDialog {=
				LabeledInput
					caption: 'Номер телефона' field: 'phone'
					appendix: {=ShowCheckBox field: 'showPhone'};
			} }
			{=LabeledInput
				caption: 'Электронная почта' field: 'email'
				appendix: {=ShowCheckBox field: 'showEmail'}
				forceNoCheck: not isEditDialog;
			}
			{=if isEditDialog {=LabeledInput caption: 'Туристский опыт' field: 'experience'} }
			<div class="form-group row">
				<label class="col-md-3 col-form-label" for="commentField">Комментарий</label>
				<div class="col-md-9">
					<textarea
						name="comment"
						class="form-control"
						id="commentField"
						{=if not{=hasRight subobj: 'comment' kind: 'edit'} and checkRights 'disabled'}
						>{{tourist.comment}}</textarea>
				</div>
			</div>
			{%
				ListBoxRow caption: 'Спортивный разряд' field: 'sportsCategory';
				ListBoxRow caption: 'Судейская категория' field: 'refereeCategory'
			}
			<input type="hidden" name="action" value="write"/>
			<hr/>
			{=if isEditDialog {*
			<div class="form-group row justify-content-between">
				<span class="col-auto">
					<button type="button"
						class="{=cls 'submitBtn'} btn btn-primary"
						>Сохранить</button>
				</span>
				<span class="col-auto">
					{=if {=hasRight kind: 'delete'} {*
					<button type="button"
						class="{=cls 'deleteDialogBtn'} btn btn-secondary"
						>Удалить туриста</button>
					*}}
				</span>
			</div>
			*}}
		{=if isEditDialog {*</form>*} }

	{=if isEditDialog {*
		{=DeleteConfirm
			instanceName: 'touristDeleteConfirm'
			deleteWhat: 'туриста'
		}
		<div class="{=cls 'similarsDlg'}">
			<div class="{=cls 'similarsMsg'}">
				В базе данных найдены похожие туристы. Возможно, добавляемый турист уже имеется в базе.
				Если это так, можно перейти к его редактированию. Если новый турист ещё не существует,
				можно продолжить добавление.
			</div>
			<div class="{=cls 'similarsBlock'}">
				{=TouristPlainList
					instanceName: 'similarsList'
					touristList: []
					mode: null
				}
			</div>
			<button type="button"
				class="{=cls 'forceSubmitBtn'} btn btn-primary"
				>Продолжить добавление</button>
		</div>
	*}}
	</div>
	*}
};
}